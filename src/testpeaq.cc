/* GstPEAQ
 * Copyright (C) 2006, 2012, 2013, 2015, 2021
 * Martin Holters <martin.holters@hsu-hh.de>
 *
 * testpeaq.cc: A number of unit tests for GstPEAQ.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include "fbearmodel.h"
#include "fftearmodel.h"
#include "leveladapter.h"
#include "modpatt.h"

#include <array>
#include <cmath>
#include <iostream>

/* allowable tolerance of relative error */
static auto constexpr RELDELTA = 0.00005;
/* allowable tolerance of absolute error */
static auto constexpr DELTA = 0.000005;

static auto constexpr fft_ref_data = std::array{
  45.753615, 22360.651865, 4986.494394, 1246.108826, 498.382618, 249.176501, 142.381088,
  88.985474, 59.322029,    41.524317,   30.198687,   22.648378,  17.421312,  13.687744,
  10.949830, 8.896422,     7.326190,    6.104916,    5.140767,   4.369459,   3.745077,
  3.234227,  2.812228,     2.460568,    2.165180,    1.915240,   1.702333,   1.519845,
  1.362532,  1.226196,     1.107455,    1.003559,    0.912258,   0.831701,   0.760353,
  0.696933,  0.640371,     0.589765,    0.544350,    0.503478,   0.466595,   0.433225,
  0.402961,  0.375449,     0.350383,    0.327497,    0.306560,   0.287369,   0.269745,
  0.253531,  0.238590,     0.224798,    0.212048,    0.200243,   0.189296,   0.179132,
  0.169682,  0.160884,     0.152683,    0.145029,    0.137877,   0.131186,   0.124921,
  0.119048,  0.113536,     0.108359,    0.103491,    0.098910,   0.094594,   0.090526,
  0.086686,  0.083061,     0.079634,    0.076392,    0.073324,   0.070417,   0.067661,
  0.065047,  0.062565,     0.060208,    0.057967,    0.055836,   0.053807,   0.051875,
  0.050035,  0.048279,     0.046605,    0.045007,    0.043481,   0.042023,   0.040629,
  0.039295,  0.038020,     0.036798,    0.035628,    0.034507,   0.033432,   0.032401,
  0.031412,  0.030463,     0.029551,    0.028675,    0.027833,   0.027023,   0.026245,
  0.025496,  0.024775,     0.024080,    0.023411,    0.022767,   0.022146,   0.021547,
  0.020969,  0.020412,     0.019874,    0.019355,    0.018853,   0.018369,   0.017901,
  0.017448,  0.017011,     0.016588,    0.016178,    0.015782,   0.015399,   0.015028,
  0.014668,  0.014320,     0.013983,    0.013656,    0.013339,   0.013032,   0.012734,
  0.012445,  0.012164,     0.011892,    0.011628,    0.011372,   0.011122,   0.010880,
  0.010645,  0.010417,     0.010195,    0.009979,    0.009769,   0.009565,   0.009367,
  0.009173,  0.008986,     0.008803,    0.008625,    0.008451,   0.008283,   0.008118,
  0.007958,  0.007802,     0.007650,    0.007502,    0.007358,   0.007217,   0.007080,
  0.006946,  0.006815,     0.006688,    0.006564,    0.006443,   0.006324,   0.006209,
  0.006096,  0.005986,     0.005879,    0.005774,    0.005671,   0.005571,   0.005473,
  0.005378,  0.005284,     0.005193,    0.005104,    0.005016,   0.004931,   0.004848,
  0.004766,  0.004686,     0.004608,    0.004532,    0.004457,   0.004384,   0.004312,
  0.004242,  0.004174,     0.004106,    0.004041,    0.003976,   0.003913,   0.003851,
  0.003791,  0.003732,     0.003674,    0.003617,    0.003561,   0.003506,   0.003453,
  0.003400,  0.003349,     0.003298,    0.003249,    0.003200,   0.003153,   0.003106,
  0.003060,  0.003016,     0.002971,    0.002928,    0.002886,   0.002844,   0.002803,
  0.002763,  0.002724,     0.002685,    0.002647,    0.002610,   0.002574,   0.002538,
  0.002503,  0.002468,     0.002434,    0.002401,    0.002368,   0.002335,   0.002304,
  0.002273,  0.002242,     0.002212,    0.002182,    0.002153,   0.002125,   0.002097,
  0.002069,  0.002042,     0.002016,    0.001989,    0.001964,   0.001938,   0.001913,
  0.001889,  0.001865,     0.001841,    0.001818,    0.001795,   0.001772,   0.001750,
  0.001728,  0.001706,     0.001685,    0.001664,    0.001644,   0.001624,   0.001604,
  0.001584,  0.001565,     0.001546,    0.001527,    0.001509,   0.001491,   0.001473,
  0.001456,  0.001438,     0.001421,    0.001404,    0.001388,   0.001372,   0.001356,
  0.001340,  0.001324,     0.001309,    0.001294,    0.001279,   0.001264,   0.001250,
  0.001235,  0.001221,     0.001208,    0.001194,    0.001180,   0.001167,   0.001154,
  0.001141,  0.001129,     0.001116,    0.001104,    0.001092,   0.001079,   0.001068,
  0.001056,  0.001044,     0.001033,    0.001022,    0.001011,   0.001000,   0.000989,
  0.000979,  0.000968,     0.000958,    0.000948,    0.000937,   0.000928,   0.000918,
  0.000908,  0.000899,     0.000889,    0.000880,    0.000871,   0.000862,   0.000853,
  0.000844,  0.000835,     0.000827,    0.000818,    0.000810,   0.000801,   0.000793,
  0.000785,  0.000777,     0.000769,    0.000762,    0.000754,   0.000746,   0.000739,
  0.000732,  0.000724,     0.000717,    0.000710,    0.000703,   0.000696,   0.000689,
  0.000682,  0.000676,     0.000669,    0.000663,    0.000656,   0.000650,   0.000643,
  0.000637,  0.000631,     0.000625,    0.000619,    0.000613,   0.000607,   0.000601,
  0.000596,  0.000590,     0.000584,    0.000579,    0.000573,   0.000568,   0.000563,
  0.000557,  0.000552,     0.000547,    0.000542,    0.000537,   0.000532,   0.000527,
  0.000522,  0.000517,     0.000513,    0.000508,    0.000503,   0.000499,   0.000494,
  0.000490,  0.000485,     0.000481,    0.000476,    0.000472,   0.000468,   0.000463,
  0.000459,  0.000455,     0.000451,    0.000447,    0.000443,   0.000439,   0.000435,
  0.000431,  0.000428,     0.000424,    0.000420,    0.000416,   0.000413,   0.000409,
  0.000405,  0.000402,     0.000398,    0.000395,    0.000391,   0.000388,   0.000385,
  0.000381,  0.000378,     0.000375,    0.000371,    0.000368,   0.000365,   0.000362,
  0.000359,  0.000356,     0.000353,    0.000350,    0.000347,   0.000344,   0.000341,
  0.000338,  0.000335,     0.000332,    0.000329,    0.000327,   0.000324,   0.000321,
  0.000319,  0.000316,     0.000313,    0.000311,    0.000308,   0.000305,   0.000303,
  0.000300,  0.000298,     0.000295,    0.000293,    0.000291,   0.000288,   0.000286,
  0.000283,  0.000281,     0.000279,    0.000276,    0.000274,   0.000272,   0.000270,
  0.000268,  0.000265,     0.000263,    0.000261,    0.000259,   0.000257,   0.000255,
  0.000253,  0.000251,     0.000249,    0.000247,    0.000245,   0.000243,   0.000241,
  0.000239,  0.000237,     0.000235,    0.000233,    0.000231,   0.000229,   0.000228,
  0.000226,  0.000224,     0.000222,    0.000220,    0.000219,   0.000217,   0.000215,
  0.000213,  0.000212,     0.000210,    0.000208,    0.000207,   0.000205,   0.000204,
  0.000202,  0.000200,     0.000199,    0.000197,    0.000196,   0.000194,   0.000193,
  0.000191,  0.000190,     0.000188,    0.000187,    0.000185,   0.000184,   0.000182,
  0.000181,  0.000180,     0.000178,    0.000177,    0.000175,   0.000174,   0.000173,
  0.000171,  0.000170,     0.000169,    0.000167,    0.000166,   0.000165,   0.000164,
  0.000162,  0.000161,     0.000160,    0.000159,    0.000157,   0.000156,   0.000155,
  0.000154,  0.000153,     0.000152,    0.000150,    0.000149,   0.000148,   0.000147,
  0.000146,  0.000145,     0.000144,    0.000143,    0.000141,   0.000140,   0.000139,
  0.000138,  0.000137,     0.000136,    0.000135,    0.000134,   0.000133,   0.000132,
  0.000131,  0.000130,     0.000129,    0.000128,    0.000127,   0.000126,   0.000125,
  0.000124,  0.000123,     0.000122,    0.000122,    0.000121,   0.000120,   0.000119,
  0.000118,  0.000117,     0.000116,    0.000115,    0.000114,   0.000114,   0.000113,
  0.000112,  0.000111,     0.000110,    0.000109,    0.000109,   0.000108,   0.000107,
  0.000106,  0.000105,     0.000105,    0.000104,    0.000103,   0.000102,   0.000101,
  0.000101,  0.000100,     0.000099,    0.000098,    0.000098,   0.000097,   0.000096,
  0.000096,  0.000095,     0.000094,    0.000093,    0.000093,   0.000092,   0.000091,
  0.000091,  0.000090,     0.000089,    0.000089,    0.000088,   0.000087,   0.000087,
  0.000086,  0.000085,     0.000085,    0.000084,    0.000083,   0.000083,   0.000082,
  0.000082,  0.000081,     0.000080,    0.000080,    0.000079,   0.000079,   0.000078,
  0.000077,  0.000077,     0.000076,    0.000076,    0.000075,   0.000075,   0.000074,
  0.000073,  0.000073,     0.000072,    0.000072,    0.000071,   0.000071,   0.000070,
  0.000070,  0.000069,     0.000069,    0.000068,    0.000068,   0.000067,   0.000067,
  0.000066,  0.000066,     0.000065,    0.000065,    0.000064,   0.000064,   0.000063,
  0.000063,  0.000062,     0.000062,    0.000061,    0.000061,   0.000060,   0.000060,
  0.000059,  0.000059,     0.000058,    0.000058,    0.000058,   0.000057,   0.000057,
  0.000056,  0.000056,     0.000055,    0.000055,    0.000055,   0.000054,   0.000054,
  0.000053,  0.000053,     0.000052,    0.000052,    0.000052,   0.000051,   0.000051,
  0.000050,  0.000050,     0.000050,    0.000049,    0.000049,   0.000049,   0.000048,
  0.000048,  0.000047,     0.000047,    0.000047,    0.000046,   0.000046,   0.000046,
  0.000045,  0.000045,     0.000045,    0.000044,    0.000044,   0.000044,   0.000043,
  0.000043,  0.000042,     0.000042,    0.000042,    0.000041,   0.000041,   0.000041,
  0.000041,  0.000040,     0.000040,    0.000040,    0.000039,   0.000039,   0.000039,
  0.000038,  0.000038,     0.000038,    0.000037,    0.000037,   0.000037,   0.000036,
  0.000036,  0.000036,     0.000036,    0.000035,    0.000035,   0.000035,   0.000034,
  0.000034,  0.000034,     0.000034,    0.000033,    0.000033,   0.000033,   0.000033,
  0.000032,  0.000032,     0.000032,    0.000031,    0.000031,   0.000031,   0.000031,
  0.000030,  0.000030,     0.000030,    0.000030,    0.000029,   0.000029,   0.000029,
  0.000029,  0.000028,     0.000028,    0.000028,    0.000028,   0.000027,   0.000027,
  0.000027,  0.000027,     0.000027,    0.000026,    0.000026,   0.000026,   0.000026,
  0.000025,  0.000025,     0.000025,    0.000025,    0.000025,   0.000024,   0.000024,
  0.000024,  0.000024,     0.000023,    0.000023,    0.000023,   0.000023,   0.000023,
  0.000022,  0.000022,     0.000022,    0.000022,    0.000022,   0.000021,   0.000021,
  0.000021,  0.000021,     0.000021,    0.000020,    0.000020,   0.000020,   0.000020,
  0.000020,  0.000020,     0.000019,    0.000019,    0.000019,   0.000019,   0.000019,
  0.000018,  0.000018,     0.000018,    0.000018,    0.000018,   0.000018,   0.000017,
  0.000017,  0.000017,     0.000017,    0.000017,    0.000017,   0.000016,   0.000016,
  0.000016,  0.000016,     0.000016,    0.000016,    0.000015,   0.000015,   0.000015,
  0.000015,  0.000015,     0.000015,    0.000015,    0.000014,   0.000014,   0.000014,
  0.000014,  0.000014,     0.000014,    0.000014,    0.000013,   0.000013,   0.000013,
  0.000013,  0.000013,     0.000013,    0.000013,    0.000012,   0.000012,   0.000012,
  0.000012,  0.000012,     0.000012,    0.000012,    0.000012,   0.000011,   0.000011,
  0.000011,  0.000011,     0.000011,    0.000011,    0.000011,   0.000011,   0.000010,
  0.000010,  0.000010,     0.000010,    0.000010,    0.000010,   0.000010,   0.000010,
  0.000010,  0.000009,     0.000009,    0.000009,    0.000009,   0.000009,   0.000009,
  0.000009,  0.000009,     0.000009,    0.000008,    0.000008,   0.000008,   0.000008,
  0.000008,  0.000008,     0.000008,    0.000008,    0.000008,   0.000008,   0.000007,
  0.000007,  0.000007,     0.000007,    0.000007,    0.000007,   0.000007,   0.000007,
  0.000007,  0.000007,     0.000006,    0.000006,    0.000006,   0.000006,   0.000006,
  0.000006,  0.000006,     0.000006,    0.000006,    0.000006,   0.000006,   0.000006,
  0.000005,  0.000005,     0.000005,    0.000005,    0.000005,   0.000005,   0.000005,
  0.000005,  0.000005,     0.000005,    0.000005,    0.000005,   0.000005,   0.000004,
  0.000004,  0.000004,     0.000004,    0.000004,    0.000004,   0.000004,   0.000004,
  0.000004,  0.000004,     0.000004,    0.000004,    0.000004,   0.000004,   0.000004,
  0.000003,  0.000003,     0.000003,    0.000003,    0.000003,   0.000003,   0.000003,
  0.000003,  0.000003,     0.000003,    0.000003,    0.000003,   0.000003,   0.000003,
  0.000003,  0.000003,     0.000003,    0.000003,    0.000002,   0.000002,   0.000002,
  0.000002,  0.000002,     0.000002,    0.000002,    0.000002,   0.000002,   0.000002,
  0.000002,  0.000002,     0.000002,    0.000002,    0.000002,   0.000002,   0.000002,
  0.000002,  0.000002,     0.000002,    0.000002,    0.000002,   0.000001,   0.000001,
  0.000001,  0.000001,     0.000001,    0.000001,    0.000001,   0.000001,   0.000001,
  0.000001,  0.000001,     0.000001,    0.000001,    0.000001,   0.000001,   0.000001,
  0.000001,  0.000001,     0.000001,    0.000001,    0.000001,   0.000001,   0.000001,
  0.000001,  0.000001,     0.000001,    0.000001,    0.000001,   0.000001,   0.000001,
  0.000001,  0.000001,     0.000001,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000,    0.000000,    0.000000,   0.000000,   0.000000,
  0.000000,  0.000000,     0.000000
};

static auto constexpr weighted_fft_ref_data = std::array{
  0.000000,  141.467357, 272.377031, 152.374914, 93.913964, 61.709413, 42.631835, 30.657191,
  22.776622, 17.383418,  13.569721,  10.797261,  8.733477,  7.165486,  5.952751,  4.999966,
  4.240947,  3.628759,   3.129485,   2.718203,   2.376315,  2.089756,  1.847751,  1.641950,
  1.465818,  1.314185,   1.182930,   1.068734,   0.968911,  0.881266,  0.803994,  0.735604,
  0.674854,  0.620706,   0.572286,   0.528857,   0.489792,  0.454556,  0.422693,  0.393808,
  0.367561,  0.343660,   0.321849,   0.301904,   0.283632,  0.266861,  0.251440,  0.237239,
  0.224138,  0.212035,   0.200836,   0.190460,   0.180834,  0.171891,  0.163573,  0.155826,
  0.148604,  0.141863,   0.135565,   0.129674,   0.124159,  0.118990,  0.114142,  0.109591,
  0.105314,  0.101293,   0.097508,   0.093943,   0.090583,  0.087413,  0.084421,  0.081595,
  0.078923,  0.076397,   0.074005,   0.071740,   0.069594,  0.067559,  0.065628,  0.063795,
  0.062053,  0.060398,   0.058824,   0.057326,   0.055899,  0.054540,  0.053244,  0.052008,
  0.050827,  0.049700,   0.048622,   0.047590,   0.046603,  0.045656,  0.044749,  0.043878,
  0.043041,  0.042236,   0.041462,   0.040716,   0.039996,  0.039300,  0.038628,  0.037978,
  0.037347,  0.036735,   0.036140,   0.035562,   0.034998,  0.034448,  0.033910,  0.033384,
  0.032868,  0.032362,   0.031865,   0.031376,   0.030893,  0.030417,  0.029947,  0.029482,
  0.029021,  0.028565,   0.028112,   0.027661,   0.027214,  0.026768,  0.026325,  0.025883,
  0.025443,  0.025004,   0.024566,   0.024129,   0.023693,  0.023258,  0.022824,  0.022391,
  0.021959,  0.021528,   0.021098,   0.020670,   0.020243,  0.019818,  0.019396,  0.018975,
  0.018557,  0.018142,   0.017729,   0.017320,   0.016915,  0.016513,  0.016115,  0.015722,
  0.015333,  0.014950,   0.014571,   0.014197,   0.013830,  0.013468,  0.013112,  0.012762,
  0.012419,  0.012082,   0.011751,   0.011428,   0.011111,  0.010802,  0.010499,  0.010204,
  0.009915,  0.009634,   0.009360,   0.009093,   0.008833,  0.008580,  0.008335,  0.008096,
  0.007864,  0.007639,   0.007421,   0.007209,   0.007004,  0.006806,  0.006613,  0.006427,
  0.006247,  0.006072,   0.005904,   0.005741,   0.005583,  0.005431,  0.005284,  0.005142,
  0.005005,  0.004873,   0.004745,   0.004622,   0.004503,  0.004388,  0.004277,  0.004170,
  0.004066,  0.003967,   0.003871,   0.003778,   0.003688,  0.003602,  0.003518,  0.003438,
  0.003360,  0.003285,   0.003212,   0.003142,   0.003074,  0.003009,  0.002946,  0.002885,
  0.002825,  0.002768,   0.002713,   0.002659,   0.002607,  0.002557,  0.002508,  0.002461,
  0.002416,  0.002371,   0.002328,   0.002287,   0.002246,  0.002207,  0.002168,  0.002131,
  0.002095,  0.002060,   0.002026,   0.001993,   0.001960,  0.001929,  0.001898,  0.001868,
  0.001839,  0.001810,   0.001783,   0.001756,   0.001729,  0.001703,  0.001678,  0.001653,
  0.001629,  0.001605,   0.001582,   0.001560,   0.001537,  0.001516,  0.001494,  0.001474,
  0.001453,  0.001433,   0.001413,   0.001394,   0.001375,  0.001357,  0.001338,  0.001320,
  0.001303,  0.001285,   0.001268,   0.001252,   0.001235,  0.001219,  0.001203,  0.001188,
  0.001172,  0.001157,   0.001142,   0.001128,   0.001113,  0.001099,  0.001085,  0.001071,
  0.001058,  0.001045,   0.001031,   0.001019,   0.001006,  0.000993,  0.000981,  0.000969,
  0.000957,  0.000945,   0.000933,   0.000922,   0.000910,  0.000899,  0.000888,  0.000877,
  0.000866,  0.000856,   0.000845,   0.000835,   0.000825,  0.000815,  0.000805,  0.000795,
  0.000786,  0.000776,   0.000767,   0.000757,   0.000748,  0.000739,  0.000731,  0.000722,
  0.000713,  0.000705,   0.000696,   0.000688,   0.000680,  0.000672,  0.000664,  0.000656,
  0.000648,  0.000640,   0.000633,   0.000625,   0.000618,  0.000610,  0.000603,  0.000596,
  0.000589,  0.000582,   0.000575,   0.000568,   0.000562,  0.000555,  0.000548,  0.000542,
  0.000536,  0.000529,   0.000523,   0.000517,   0.000511,  0.000505,  0.000499,  0.000493,
  0.000487,  0.000482,   0.000476,   0.000470,   0.000465,  0.000460,  0.000454,  0.000449,
  0.000444,  0.000438,   0.000433,   0.000428,   0.000423,  0.000418,  0.000413,  0.000409,
  0.000404,  0.000399,   0.000394,   0.000390,   0.000385,  0.000381,  0.000376,  0.000372,
  0.000368,  0.000363,   0.000359,   0.000355,   0.000351,  0.000347,  0.000343,  0.000339,
  0.000335,  0.000331,   0.000327,   0.000323,   0.000319,  0.000315,  0.000312,  0.000308,
  0.000305,  0.000301,   0.000297,   0.000294,   0.000291,  0.000287,  0.000284,  0.000280,
  0.000277,  0.000274,   0.000271,   0.000267,   0.000264,  0.000261,  0.000258,  0.000255,
  0.000252,  0.000249,   0.000246,   0.000243,   0.000240,  0.000237,  0.000235,  0.000232,
  0.000229,  0.000226,   0.000224,   0.000221,   0.000218,  0.000216,  0.000213,  0.000211,
  0.000208,  0.000206,   0.000203,   0.000201,   0.000198,  0.000196,  0.000194,  0.000191,
  0.000189,  0.000187,   0.000185,   0.000182,   0.000180,  0.000178,  0.000176,  0.000174,
  0.000172,  0.000169,   0.000167,   0.000165,   0.000163,  0.000161,  0.000159,  0.000157,
  0.000155,  0.000154,   0.000152,   0.000150,   0.000148,  0.000146,  0.000144,  0.000143,
  0.000141,  0.000139,   0.000137,   0.000136,   0.000134,  0.000132,  0.000131,  0.000129,
  0.000127,  0.000126,   0.000124,   0.000123,   0.000121,  0.000120,  0.000118,  0.000117,
  0.000115,  0.000114,   0.000112,   0.000111,   0.000109,  0.000108,  0.000107,  0.000105,
  0.000104,  0.000103,   0.000101,   0.000100,   0.000099,  0.000097,  0.000096,  0.000095,
  0.000094,  0.000092,   0.000091,   0.000090,   0.000089,  0.000088,  0.000087,  0.000085,
  0.000084,  0.000083,   0.000082,   0.000081,   0.000080,  0.000079,  0.000078,  0.000077,
  0.000076,  0.000075,   0.000074,   0.000073,   0.000072,  0.000071,  0.000070,  0.000069,
  0.000068,  0.000067,   0.000066,   0.000065,   0.000064,  0.000064,  0.000063,  0.000062,
  0.000061,  0.000060,   0.000059,   0.000058,   0.000058,  0.000057,  0.000056,  0.000055,
  0.000055,  0.000054,   0.000053,   0.000052,   0.000052,  0.000051,  0.000050,  0.000049,
  0.000049,  0.000048,   0.000047,   0.000047,   0.000046,  0.000045,  0.000045,  0.000044,
  0.000043,  0.000043,   0.000042,   0.000042,   0.000041,  0.000040,  0.000040,  0.000039,
  0.000039,  0.000038,   0.000037,   0.000037,   0.000036,  0.000036,  0.000035,  0.000035,
  0.000034,  0.000034,   0.000033,   0.000033,   0.000032,  0.000032,  0.000031,  0.000031,
  0.000030,  0.000030,   0.000029,   0.000029,   0.000029,  0.000028,  0.000028,  0.000027,
  0.000027,  0.000026,   0.000026,   0.000026,   0.000025,  0.000025,  0.000024,  0.000024,
  0.000024,  0.000023,   0.000023,   0.000023,   0.000022,  0.000022,  0.000021,  0.000021,
  0.000021,  0.000020,   0.000020,   0.000020,   0.000019,  0.000019,  0.000019,  0.000019,
  0.000018,  0.000018,   0.000018,   0.000017,   0.000017,  0.000017,  0.000017,  0.000016,
  0.000016,  0.000016,   0.000015,   0.000015,   0.000015,  0.000015,  0.000014,  0.000014,
  0.000014,  0.000014,   0.000013,   0.000013,   0.000013,  0.000013,  0.000013,  0.000012,
  0.000012,  0.000012,   0.000012,   0.000011,   0.000011,  0.000011,  0.000011,  0.000011,
  0.000011,  0.000010,   0.000010,   0.000010,   0.000010,  0.000010,  0.000009,  0.000009,
  0.000009,  0.000009,   0.000009,   0.000009,   0.000008,  0.000008,  0.000008,  0.000008,
  0.000008,  0.000008,   0.000008,   0.000007,   0.000007,  0.000007,  0.000007,  0.000007,
  0.000007,  0.000007,   0.000006,   0.000006,   0.000006,  0.000006,  0.000006,  0.000006,
  0.000006,  0.000006,   0.000006,   0.000005,   0.000005,  0.000005,  0.000005,  0.000005,
  0.000005,  0.000005,   0.000005,   0.000005,   0.000005,  0.000004,  0.000004,  0.000004,
  0.000004,  0.000004,   0.000004,   0.000004,   0.000004,  0.000004,  0.000004,  0.000004,
  0.000004,  0.000003,   0.000003,   0.000003,   0.000003,  0.000003,  0.000003,  0.000003,
  0.000003,  0.000003,   0.000003,   0.000003,   0.000003,  0.000003,  0.000003,  0.000003,
  0.000003,  0.000002,   0.000002,   0.000002,   0.000002,  0.000002,  0.000002,  0.000002,
  0.000002,  0.000002,   0.000002,   0.000002,   0.000002,  0.000002,  0.000002,  0.000002,
  0.000002,  0.000002,   0.000002,   0.000002,   0.000002,  0.000002,  0.000002,  0.000002,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000001,  0.000001,  0.000001,  0.000001,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000001,  0.000001,  0.000001,  0.000001,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000001,  0.000001,  0.000001,  0.000001,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000001,  0.000001,  0.000001,  0.000001,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000001,  0.000001,  0.000001,  0.000001,
  0.000001,  0.000001,   0.000001,   0.000001,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000,  0.000000,   0.000000,   0.000000,   0.000000,  0.000000,  0.000000,  0.000000,
  0.000000
};

static auto constexpr unsmeared_excitation_ref = std::array{
  4444.479818, 3458.307890, 2476.902582, 1687.148923, 1111.845019, 717.415269, 458.489189,
  292.859403,  188.108327,  122.111063,  80.437553,   53.936208,   36.897706,  25.785306,
  18.408591,   13.476842,   10.146485,   7.841501,    6.204263,    5.033303,   4.186348,
  3.554651,    3.083758,    2.725308,    2.448974,    2.233633,    2.064062,   1.927977,
  1.819100,    1.730369,    1.657093,    1.596339,    1.545507,    1.502504,   1.465769,
  1.434099,    1.406543,    1.382332,    1.360980,    1.341966,    1.324860,   1.309427,
  1.295362,    1.282500,    1.270660,    1.259699,    1.249506,    1.239988,   1.231065,
  1.222667,    1.214735,    1.207222,    1.200082,    1.193279,    1.186779,   1.180552,
  1.174572,    1.168816,    1.163268,    1.157911,    1.152737,    1.147739,   1.142915,
  1.138266,    1.133791,    1.129492,    1.125366,    1.121408,    1.117612,   1.113969,
  1.110471,    1.107100,    1.103854,    1.100725,    1.097704,    1.094785,   1.091963,
  1.089233,    1.086590,    1.084031,    1.081553,    1.079152,    1.076826,   1.074571,
  1.072386,    1.070268,    1.068214,    1.066223,    1.064293,    1.062420,   1.060605,
  1.058844,    1.057136,    1.055479,    1.053872,    1.052314,    1.050802,   1.049337,
  1.047917,    1.046542,    1.045214,    1.043933,    1.042706,    1.041540,   1.040452,
  1.039467,    1.038630,    1.038030,    1.037901
};

static auto constexpr excitation_ref = std::array{
  1471383.154403, 1784862.319735, 2101162.156197, 2338471.350385, 2499214.928898,
  2571730.433658, 2579416.333721, 2529922.626285, 2444390.214750, 2332168.186978,
  2206250.638417, 2073217.021524, 1939180.266427, 1807914.572103, 1680942.192057,
  1561356.107444, 1449900.757658, 1346679.568437, 1251088.135018, 1163169.255593,
  1082978.131305, 1009288.718863, 942152.978451,  880816.475225,  824866.151709,
  773810.888644,  727258.694447,  684545.444266,  645739.615593,  610314.929805,
  577864.997361,  548260.693315,  521300.995058,  496757.835542,  474450.514958,
  454227.589690,  435953.597901,  419496.213725,  404869.224749,  391981.220355,
  380728.951700,  371180.695629,  363262.385575,  357039.639252,  352528.344745,
  349773.798317,  348840.194206,  349810.185964,  352763.857065,  357780.074455,
  364925.163245,  374218.430049,  385632.659205,  399017.183416,  414087.711983,
  430359.532681,  447099.872855,  463293.955467,  477631.774673,  488576.621667,
  494492.510166,  493809.460148,  485375.283461,  468583.173650,  443718.541979,
  411822.562607,  374738.693876,  334706.889466,  294078.025873,  254892.742017,
  218715.171838,  186506.501453,  158671.031052,  135168.154347,  115654.947163,
  99626.273998,   86521.161825,   75786.724728,   66933.946355,   59547.204025,
  53289.301379,   47895.540142,   43162.497533,   38939.031544,   35112.016971,
  31599.764810,   28343.616150,   25303.437696,   22452.092805,   19773.664806,
  17259.885826,   14909.199501,   12723.956083,   10709.982076,   8874.001205,
  7223.065717,    5762.520315,    4494.961120,    3419.298291,    2529.579813,
  1814.927982,    1259.618627,    843.943007,     545.472704,     340.795366,
  207.343792,     125.137131,     78.222451,      56.833883
};

static auto constexpr spectrally_adapted_ref_patterns1_ref = std::array{
  0.327362,  0.762315,  1.282633,  1.871552,  2.516234,  3.206717,  3.935214,  4.695528,
  5.482718,  6.292762,  7.122411,  7.968971,  8.830209,  9.704267,  10.589579, 11.484812,
  12.388835, 13.300667, 14.219471, 15.144510, 16.075139, 17.010804, 17.950993, 18.895267,
  19.843226, 20.794517, 21.748817, 22.705838, 23.665307, 24.626993, 25.590666, 26.556132,
  27.523199, 28.491696, 29.461470, 30.432371, 31.404262, 32.377017, 33.350524, 34.324667,
  35.299350, 36.274480, 37.249965, 38.113783, 38.798812, 39.299146, 39.609137, 39.723392,
  39.636757, 39.344301, 38.841307, 38.258069, 37.668946, 37.074235, 36.474223, 35.869177,
  35.259350, 34.644979, 34.026292, 33.403503, 32.776813, 32.146415, 31.512490, 30.875211,
  30.234741, 29.591235, 28.944840, 28.295696, 27.643935, 26.989684, 26.333062, 25.674183,
  25.013155, 24.350082, 23.685061, 23.018185, 22.349542, 21.679218, 21.007293, 20.333842,
  19.658938, 18.982652, 18.305048, 17.626189, 16.946137, 16.264946, 15.582672, 14.899366,
  14.215079, 13.529855, 12.843742, 12.156780, 11.469011, 10.780473, 10.091204, 9.401238,
  8.710609,  8.019349,  7.327489,  6.635057,  5.942075,  5.248589,  4.554604,  3.860150,
  3.165251,  2.822776,  2.477908,  2.130688,  1.781147
};

static auto constexpr spectrally_adapted_test_patterns1_ref = std::array{
  1.006854,  1.363780,  1.743222,  2.139886,  2.807864,  3.519702,  4.267947,  5.046669,
  5.851143,  6.677529,  7.522728,  8.384170,  9.259728,  10.147636, 11.046405, 11.954768,
  12.871655, 13.796134, 14.727417, 15.664805, 16.607690, 17.555554, 18.507913, 19.464358,
  20.424514, 21.388055, 22.354680, 23.324122, 24.296133, 25.270502, 26.247018, 27.225510,
  28.205804, 29.187752, 30.171220, 31.156079, 32.142213, 33.129519, 34.117907, 35.107285,
  36.097579, 37.088724, 38.080653, 38.943315, 39.604034, 40.063983, 40.324580, 40.387487,
  40.254598, 39.928032, 39.410135, 38.819881, 38.223869, 37.622399, 37.015754, 36.404200,
  35.787989, 35.167357, 34.542529, 33.913716, 33.281118, 32.644927, 32.005320, 31.362467,
  30.716530, 30.067663, 29.416008, 28.761705, 28.104883, 27.445666, 26.784171, 26.120512,
  25.454792, 24.787114, 24.117573, 23.446261, 22.773263, 22.098663, 21.422539, 20.744965,
  20.066013, 19.385749, 18.704238, 18.021542, 17.337718, 16.652823, 15.966907, 15.280023,
  14.592218, 13.903537, 13.214024, 12.523719, 11.832664, 11.140894, 10.448445, 9.755352,
  9.061647,  8.367361,  7.672523,  6.977161,  6.281294,  5.584970,  4.888191,  4.190987,
  3.493381,  2.795392,  2.097041,  1.398347,  0.699325
};

static auto constexpr spectrally_adapted_ref_patterns2_ref = std::array{
  0.547559,  1.234068,  2.016884,  2.867427,  3.766181,  4.699595,  5.658155,  6.635058,
  7.625414,  8.625638,  9.633119,  10.645901, 11.662526, 12.681906, 13.703212, 14.725817,
  15.749244, 16.773126, 17.797186, 18.821211, 19.845035, 20.868542, 21.891632, 22.914238,
  23.936307, 24.957806, 25.978707, 26.998995, 28.018657, 29.037693, 30.056100, 31.073884,
  32.091050, 33.107606, 34.123563, 35.138931, 36.153722, 37.167949, 38.181626, 39.194765,
  40.207380, 41.052570, 41.723505, 42.199656, 42.467615, 42.522526, 42.359754, 41.974877,
  41.363667, 40.724925, 40.060238, 39.385757, 38.710331, 38.034037, 37.356946, 36.679122,
  36.000624, 35.321504, 34.641813, 33.961593, 33.280887, 32.599731, 31.918159, 31.236202,
  30.553888, 29.871245, 29.188295, 28.505060, 27.821561, 27.137816, 26.453841, 25.769653,
  25.085265, 24.400690, 23.715941, 23.031028, 22.345962, 21.660752, 20.975407, 20.289934,
  19.604341, 18.918635, 18.232821, 17.546906, 16.860895, 16.174793, 15.488604, 14.802332,
  14.115982, 13.429556, 12.743060, 12.056494, 11.369863, 10.683169, 9.996415,  9.309602,
  8.622734,  7.935812,  7.248838,  6.561814,  5.874740,  5.187621,  4.500456,  3.813247,
  3.125995,  2.787088,  2.446005,  2.102778,  1.757436
};

static auto constexpr spectrally_adapted_test_patterns2_ref = std::array{
  1.583720,  2.080140,  2.587399,  3.099982,  3.980762,  4.894353,  5.832306,  6.788528,
  7.758601,  8.739249,  9.728061,  10.723202, 11.723286, 12.727256, 13.734295, 14.743765,
  15.755173, 16.768125, 17.782315, 18.797496, 19.813471, 20.830090, 21.847220, 22.864764,
  23.882638, 24.900781, 25.919139, 26.937674, 27.956349, 28.975144, 29.994037, 31.013019,
  32.032080, 33.051215, 34.070428, 35.089718, 36.109093, 37.128561, 38.148136, 39.167829,
  40.187658, 41.015669, 41.651781, 42.081569, 42.298659, 42.305899, 42.106274, 41.702910,
  41.099071, 40.471073, 39.821049, 39.162380, 38.502275, 37.840836, 37.178158, 36.514326,
  35.849420, 35.183512, 34.516672, 33.848960, 33.180435, 32.511151, 31.841157, 31.170499,
  30.499219, 29.827359, 29.154954, 28.482038, 27.808645, 27.134802, 26.460539, 25.785880,
  25.110851, 24.435472, 23.759767, 23.083753, 22.407450, 21.730875, 21.054043, 20.376970,
  19.699671, 19.022157, 18.344442, 17.666537, 16.988453, 16.310201, 15.631790, 14.953229,
  14.274527, 13.595692, 12.916730, 12.237651, 11.558459, 10.879162, 10.199764, 9.520273,
  8.840693,  8.161030,  7.481287,  6.801469,  6.121580,  5.441627,  4.761609,  4.081532,
  3.401400,  2.721214,  2.040978,  1.360696,  0.680369
};

static auto constexpr modulation1_ref = std::array{
  7.337918,  8.578334,  9.345931,  9.882149,  10.280869, 10.589878, 10.836808, 11.038893,
  11.207512, 11.350473, 11.473340, 11.580164, 11.673977, 11.757091, 11.831298, 11.898010,
  11.958352, 12.013233, 12.063398, 12.109457, 12.151921, 12.191217, 12.227706, 12.261695,
  12.293448, 12.323190, 12.351120, 12.377407, 12.402200, 12.425633, 12.447821, 12.468867,
  12.488862, 12.507887, 12.526018, 12.543318, 12.559848, 12.575662, 12.590807, 12.605327,
  12.619264, 12.632654, 12.645531, 12.657925, 12.669865, 12.681377, 12.692486, 12.703213,
  12.713579, 12.723603, 12.733304, 12.742697, 12.751798, 12.760622, 12.769182, 12.777490,
  12.785559, 12.793399, 12.801021, 12.808434, 12.815648, 12.822672, 12.829513, 12.836178,
  12.842677, 12.849014, 12.855198, 12.861233, 12.867126, 12.872882, 12.878506, 12.884004,
  12.889380, 12.894639, 12.899784, 12.904821, 12.909752, 12.914582, 12.919314, 12.923951,
  12.928496, 12.932954, 12.937326, 12.941615, 12.945824, 12.949956, 12.954013, 12.957997,
  12.961911, 12.965757, 12.969537, 12.973252, 12.976905, 12.980498, 12.984032, 12.987510,
  12.990931, 12.994299, 12.997615, 13.000880, 13.004094, 13.007263, 13.010384, 13.013459,
  13.016489, 13.019477, 13.022422, 13.025326, 13.028187
};

static auto constexpr loudness1_ref = std::array{
  0.327362, 0.469260, 0.594453, 0.709186, 0.815590, 0.914860, 1.007859, 1.095271, 1.177677,
  1.255571, 1.329389, 1.399508, 1.466259, 1.529935, 1.590797, 1.649073, 1.704968, 1.758663,
  1.810322, 1.860091, 1.908100, 1.954470, 1.999305, 2.042703, 2.084751, 2.125531, 2.165115,
  2.203570, 2.240957, 2.277333, 2.312748, 2.347253, 2.380889, 2.413699, 2.445720, 2.476989,
  2.507537, 2.537396, 2.566596, 2.595161, 2.623119, 2.650493, 2.677306, 2.703578, 2.729330,
  2.754580, 2.779348, 2.803649, 2.827499, 2.850915, 2.873910, 2.896500, 2.918696, 2.940511,
  2.961959, 2.983049, 3.003794, 3.024204, 3.044289, 3.064058, 3.083522, 3.102689, 3.121568,
  3.140166, 3.158493, 3.176555, 3.194361, 3.211917, 3.229229, 3.246306, 3.263153, 3.279775,
  3.296180, 3.312373, 3.328359, 3.344144, 3.359733, 3.375131, 3.390343, 3.405373, 3.420226,
  3.434907, 3.449419, 3.463767, 3.477954, 3.491985, 3.505864, 3.519593, 3.533176, 3.546617,
  3.559919, 3.573086, 3.586119, 3.599023, 3.611800, 3.624454, 3.636986, 3.649399, 3.661696,
  3.673880, 3.685949, 3.697917, 3.709775, 3.721529, 3.733180, 3.744732, 3.756186, 3.767544,
  3.778796
};

static auto constexpr modulation2_ref = std::array{
  3.653446, 3.853811, 3.875632, 3.827273, 3.746460, 3.650338, 3.547670, 3.443252, 3.339771,
  3.238763, 3.141060, 3.047102, 2.957075, 2.871009, 2.788840, 2.710453, 2.635696, 2.564407,
  2.496411, 2.431537, 2.369620, 2.310492, 2.254006, 2.200014, 2.148381, 2.098976, 2.051681,
  2.006383, 1.962980, 1.921371, 1.881469, 1.843185, 1.806443, 1.771167, 1.737286, 1.704738,
  1.673459, 1.643394, 1.614487, 1.586689, 1.559950, 1.534225, 1.509472, 1.485650, 1.462721,
  1.440648, 1.419396, 1.398933, 1.379227, 1.360249, 1.341970, 1.324363, 1.307402, 1.291062,
  1.275319, 1.260151, 1.245537, 1.231455, 1.217885, 1.204808, 1.192207, 1.180063, 1.168359,
  1.157079, 1.146209, 1.135732, 1.125634, 1.115901, 1.106521, 1.097480, 1.088766, 1.080367,
  1.072271, 1.064469, 1.056948, 1.049699, 1.042712, 1.035978, 1.029488, 1.023232, 1.017202,
  1.011391, 1.005790, 1.000391, 0.995188, 0.990174, 0.985341, 0.980684, 0.976195, 0.971870,
  0.967701, 0.963684, 0.959813, 0.956082, 0.952488, 0.949024, 0.945686, 0.942471, 0.939372,
  0.936387, 0.933524, 0.930740, 0.928071, 0.925500, 0.923023, 0.920637, 0.918338, 0.916125,
  0.914025
};

static auto constexpr loudness2_ref = std::array{
  0.547559, 0.759658, 0.934751, 1.086552, 1.220737, 1.340771, 1.449126, 1.547682, 1.637924,
  1.721041, 1.798010, 1.869629, 1.936566, 1.999378, 2.058536, 2.114440, 2.167432, 2.217804,
  2.265812, 2.311674, 2.355583, 2.397708, 2.438196, 2.477180, 2.514775, 2.551086, 2.586205,
  2.620215, 2.653192, 2.685204, 2.716311, 2.746569, 2.776030, 2.804739, 2.832740, 2.860071,
  2.886768, 2.912863, 2.938388, 2.963371, 2.987838, 3.011813, 3.035320, 3.058378, 3.081008,
  3.103228, 3.125055, 3.146506, 3.167595, 3.188338, 3.208747, 3.228834, 3.248613, 3.268094,
  3.287287, 3.306204, 3.324853, 3.343243, 3.361383, 3.379282, 3.396946, 3.414383, 3.431601,
  3.448606, 3.465404, 3.482002, 3.498405, 3.514618, 3.530648, 3.546498, 3.562175, 3.577682,
  3.593025, 3.608207, 3.623232, 3.638105, 3.652829, 3.667409, 3.681846, 3.696145, 3.710310,
  3.724342, 3.738246, 3.752023, 3.765678, 3.779212, 3.792629, 3.805930, 3.819118, 3.832196,
  3.845166, 3.858030, 3.870790, 3.883448, 3.896006, 3.908467, 3.920832, 3.933102, 3.945280,
  3.957368, 3.969366, 3.981278, 3.993103, 4.004845, 4.016503, 4.028080, 4.039578, 4.050997,
  4.062336
};

static void test_ear();
static void test_leveladapt();
static void test_modulationproc();

template<typename T1, typename T2>
static void assertArrayEquals(const T1& dut, const T2& ref, const char* var_name)
{
  for (std::size_t i = 0; i < ref.size(); i++) {
    auto diff = dut[i] - ref[i];
    auto reldiff = 2 * (dut[i] - ref[i]) / (dut[i] + ref[i]);
    if ((diff > DELTA || diff < -DELTA) && (reldiff > RELDELTA || reldiff < -RELDELTA)) {
      std::cerr << var_name << '[' << i << "] = " << dut[i] << " != " << ref[i]
                << " (diff = " << diff << ", rel = " << reldiff << ")\n";
      exit(1);
    }
  }
}

template<typename T1, typename T2>
static void assertArrayEqualsSq(const T1& dut, const T2& ref, const char* var_name)
{
  for (std::size_t i = 0; i < ref.size(); i++) {
    auto diff = dut[i] - ref[i] * ref[i];
    auto reldiff = 2 * (dut[i] - ref[i] * ref[i]) / (dut[i] + ref[i] * ref[i]);
    if ((diff > DELTA || diff < -DELTA) && (reldiff > RELDELTA || reldiff < -RELDELTA)) {
      std::cerr << var_name << '[' << i << "] = " << dut[i] << " != " << (ref[i] * ref[i])
                << " (diff = " << diff << ", rel = " << reldiff << ")\n";
      exit(1);
    }
  }
}

auto main(int /*argc*/, char* /*argv*/[]) -> int
{
  test_ear();
  test_leveladapt();
  test_modulationproc();

  return 0;
}

static void test_ear()
{
  auto ear = peaq::FFTEarModel<>{};
  auto state = peaq::FFTEarModel<>::state_t{};

  std::array<float, 2048> input_data;
  std::fill(begin(input_data), begin(input_data) + 1024, -1.0);
  input_data[1024] = 0;
  std::fill(begin(input_data) + 1025, end(input_data), 1.0);
  ear.process_block(state, cbegin(input_data));
  for (auto i = 0; i < 2048; i++) {
    input_data[i] = static_cast<float>(i - 1024) / 1024;
  }
  ear.process_block(state, cbegin(input_data));

  assertArrayEqualsSq(
    peaq::FFTEarModel<>::get_power_spectrum(state), fft_ref_data, "absolute_spectrum");

  assertArrayEqualsSq(peaq::FFTEarModel<>::get_weighted_power_spectrum(state),
                      weighted_fft_ref_data,
                      "weighted_fft");

  assertArrayEquals(
    ear.get_unsmeared_excitation(state), unsmeared_excitation_ref, "unsmeared_excitation");

  assertArrayEquals(ear.get_excitation(state), excitation_ref, "excitation");

  for (auto frame = 0; frame < 10; frame++) {
    for (std::size_t i = 0; i < input_data.size(); i++) {
      input_data[i] = sin(2 * M_PI * 1019.5 / 48000. * (i + frame * 1024));
    }
    ear.process_block(state, cbegin(input_data));
    auto SPL = 10.0 * std::log10(peaq::FFTEarModel<>::get_power_spectrum(state)[43]);
    if (SPL > 92.0001 || SPL < 91.9999) {
      std::cerr << "SPL == " << SPL << " != 92\n";
      exit(1);
    }
  }

  for (auto frame = 0; frame < 50; frame++) {
    /* generate 1kHz sine at 40dB SPL */
    auto scale = std::pow(10., (40. - 92.) / 20);
    for (std::size_t i = 0; i < input_data.size(); i++) {
      input_data[i] = scale * sin(2 * M_PI * 1000. / 48000. * (i + frame * 1024));
    }
    ear.process_block(state, cbegin(input_data));
  }
  /* [BS1387] claims that the constants are chosen such that the loudness is 1
   * Sone, [Kabal03] already mentions that the algorithm in fact yields 0.584 */
  auto loudness = ear.calc_loudness(&state);
#if 0
  if (loudness > 1.01 || loudness < 0.99) {
#else
  if (loudness > 0.59 || loudness < 0.58) {
#endif
  std::cerr << "loudness == " << loudness << " != 1\n";
  exit(1);
}

auto fb_ear = peaq::FilterbankEarModel{};
auto fb_state = peaq::FilterbankEarModel::state_t{};

for (auto frame = 0; frame < 250; frame++) {
  auto input_data = std::array<double, 192>{};
  /* generate 1kHz sine at 40dB SPL */
  auto scale = std::pow(10., (40. - 92.) / 20);
  for (std::size_t i = 0; i < input_data.size(); i++) {
    input_data[i] = scale * sin(2 * M_PI * 1000. / 48000. * (i + frame * 192));
  }
  fb_ear.process_block(fb_state, input_data);
}
loudness = fb_ear.calc_loudness(&fb_state);
/* [BS1387] claims that the constants are chosen such that the loudness is 1
 * Sone, [Kabal03] already mentions that the algorithm in fact yields 0.584
 * for the basic version; the advanced also seems to be a bit off */
#if 1
if (loudness > 1.04 || loudness < 1.03) {
#else
  if (loudness > 0.59 || loudness < 0.58) {
#endif
  std::cerr << "loudness == " << loudness << " != 1\n";
  exit(1);
}
}

static void test_leveladapt()
{
  auto input_data_ref = std::array<double, 109>{};
  auto input_data_test = std::array<double, 109>{};

  auto ear = peaq::FFTEarModel{};

  auto band_count = ear.get_band_count();
  auto level = peaq::LevelAdapter(ear);
  for (std::size_t i = 0; i < band_count; i++) {
    input_data_ref[i] = i + 1;
    input_data_test[i] = band_count - i;
  }
  level.process(input_data_ref, input_data_test);
  auto spectrally_adapted_ref_patterns = level.get_adapted_ref();
  auto spectrally_adapted_test_patterns = level.get_adapted_test();
  assertArrayEquals(spectrally_adapted_ref_patterns,
                    spectrally_adapted_ref_patterns1_ref,
                    "spectrally_adapted_ref_patterns1");
  assertArrayEquals(spectrally_adapted_test_patterns,
                    spectrally_adapted_test_patterns1_ref,
                    "spectrally_adapted_test_patterns1");
  level.process(input_data_ref, input_data_test);
  spectrally_adapted_ref_patterns = level.get_adapted_ref();
  spectrally_adapted_test_patterns = level.get_adapted_test();
  assertArrayEquals(spectrally_adapted_ref_patterns,
                    spectrally_adapted_ref_patterns2_ref,
                    "spectrally_adapted_ref_patterns2");
  assertArrayEquals(spectrally_adapted_test_patterns,
                    spectrally_adapted_test_patterns2_ref,
                    "spectrally_adapted_test_patterns2");
}

static void test_modulationproc()
{
  auto ear = peaq::FFTEarModel{};
  auto modproc = peaq::ModulationProcessor{ ear };
  auto input_data = std::array<double, 109>{};
  for (std::size_t i = 0; i < input_data.size(); i++) {
    input_data[i] = i + 1;
  }
  modproc.process(input_data);
  assertArrayEquals(modproc.get_modulation(), modulation1_ref, "modulation1");
  assertArrayEquals(modproc.get_average_loudness(), loudness1_ref, "average_loudness1");
  modproc.process(input_data);
  assertArrayEquals(modproc.get_modulation(), modulation2_ref, "modulation2");
  assertArrayEquals(modproc.get_average_loudness(), loudness2_ref, "average_loudness2");
}
